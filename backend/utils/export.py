"""
Export utilities for PDF and CSV report generation
"""
from typing import AsyncGenerator
from io import BytesIO
import csv
from datetime import datetime
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.enums import TA_JUSTIFY, TA_CENTER
import logging

from db.postgres import get_research

logger = logging.getLogger(__name__)


async def generate_pdf(research_id: str) -> AsyncGenerator[bytes, None]:
    """Generate PDF report"""

    research = await get_research(research_id)

    if not research:
        raise ValueError(f"Research {research_id} not found")

    buffer = BytesIO()

    # Create PDF document
    doc = SimpleDocTemplate(
        buffer,
        pagesize=letter,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=18
    )

    # Container for PDF elements
    elements = []

    # Styles
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(
        name='Justify',
        parent=styles['BodyText'],
        alignment=TA_JUSTIFY
    ))

    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        textColor='#1a56db',
        spaceAfter=30,
        alignment=TA_CENTER
    )

    # Title
    title = Paragraph(f"Research Report: {research['topic']}", title_style)
    elements.append(title)
    elements.append(Spacer(1, 12))

    # Metadata
    metadata_text = f"""
    <b>Research ID:</b> {research_id}<br/>
    <b>Status:</b> {research['status']}<br/>
    <b>Created:</b> {research['created_at'].strftime('%Y-%m-%d %H:%M:%S') if research.get('created_at') else 'N/A'}<br/>
    """

    metadata = Paragraph(metadata_text, styles['Normal'])
    elements.append(metadata)
    elements.append(Spacer(1, 24))

    # Report content
    if research.get('report'):
        report_content = research['report']

        # Convert markdown to PDF-friendly format (simple approach)
        lines = report_content.split('\n')

        for line in lines:
            line = line.strip()

            if not line:
                elements.append(Spacer(1, 6))
                continue

            # Headers
            if line.startswith('# '):
                p = Paragraph(line[2:], styles['Heading1'])
            elif line.startswith('## '):
                p = Paragraph(line[3:], styles['Heading2'])
            elif line.startswith('### '):
                p = Paragraph(line[4:], styles['Heading3'])
            # Lists
            elif line.startswith('- ') or line.startswith('* '):
                p = Paragraph(f"â€¢ {line[2:]}", styles['Normal'])
            # Numbered lists
            elif line[0].isdigit() and line[1:3] in ['. ', ') ']:
                p = Paragraph(line, styles['Normal'])
            # Regular text
            else:
                p = Paragraph(line, styles['Justify'])

            elements.append(p)
            elements.append(Spacer(1, 6))

    else:
        no_report = Paragraph("Report not yet generated.", styles['Normal'])
        elements.append(no_report)

    # Footer
    elements.append(PageBreak())
    footer_text = f"""
    <i>Generated by Noesis AI Research Agent<br/>
    {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}</i>
    """
    footer = Paragraph(footer_text, styles['Normal'])
    elements.append(footer)

    # Build PDF
    doc.build(elements)

    # Get PDF bytes
    buffer.seek(0)
    pdf_bytes = buffer.read()

    # Yield in chunks
    chunk_size = 8192
    for i in range(0, len(pdf_bytes), chunk_size):
        yield pdf_bytes[i:i + chunk_size]

    logger.info(f"Generated PDF for research {research_id}")


async def generate_csv(research_id: str) -> AsyncGenerator[bytes, None]:
    """Generate CSV export of research findings"""

    research = await get_research(research_id)

    if not research:
        raise ValueError(f"Research {research_id} not found")

    # Get findings from database
    from db.postgres import pool
    async with pool.acquire() as conn:
        findings = await conn.fetch("""
            SELECT content, source_url, relevance_score, metadata, created_at
            FROM findings
            WHERE research_id = $1
            ORDER BY created_at DESC
        """, research_id)

    buffer = BytesIO()
    writer = csv.writer(buffer)

    # Header
    writer.writerow([
        'Research ID',
        'Topic',
        'Finding Content',
        'Source URL',
        'Relevance Score',
        'Created At'
    ])

    # Findings
    for finding in findings:
        writer.writerow([
            research_id,
            research['topic'],
            finding['content'][:500],  # Truncate for CSV
            finding['source_url'],
            f"{finding['relevance_score']:.3f}",
            finding['created_at'].strftime('%Y-%m-%d %H:%M:%S')
        ])

    # Get CSV bytes
    buffer.seek(0)
    csv_bytes = buffer.read()

    # Yield in chunks
    chunk_size = 8192
    for i in range(0, len(csv_bytes), chunk_size):
        yield csv_bytes[i:i + chunk_size]

    logger.info(f"Generated CSV for research {research_id}")
